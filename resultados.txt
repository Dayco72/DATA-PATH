00000000000000000000000000000000 // $0
00000000000000000000000000000101 // $1 (5)
00000000000000000000000000000110 // $2 (6)
00000000000000000000000000000000 // $3
00000000000000000000000000001000 // $4 (8)
00000000000000000000000000000100 // $5 (4)
00000000000000000000000000000000 // $6
00000000000000000000000000000000 // $7
00000000000000000000000000000000 // $8
00000000000000000000000000000000 // $9
00000000000000000000000000000000 // $10
00000000000000000000000000000000 // $11
00000000000000000000000000000000 // $12
00000000000000000000000000000000 // $13
00000000000000000000000000000000 // $14
00000000000000000000000000000000 // $15
00000000000000000000000000000000 // $16
00000000000000000000000000000000 // $17
00000000000000000000000000000000 // $18
00000000000000000000000000000000 // $19
00000000000000000000000000000000 // $20
00000000000000000000000000000000 // $21
00000000000000000000000000000000 // $22
00000000000000000000000000000000 // $23
00000000000000000000000000000000 // $24
00000000000000000000000000000000 // $25
00000000000000000000000000000000 // $26
00000000000000000000000000000000 // $27
00000000000000000000000000000000 // $28
00000000000000000000000000000000 // $29
00000000000000000000000000000000 // $30
00000000000000000000000000000000 // $31

        Instr = 32'b000000_00001_00010_00011_00000_100000; // ADD $3,$1,$2
        #10;
        Instr = 32'b000000_00100_00101_00110_00000_100000; // ADD $6,$4,$5
        #10;
        Instr = 32'b000000_00001_00010_00111_00000_100010; // SUB $7,$1,$2
        #10;
        Instr = 32'b000000_00100_00101_01000_00000_100010; // SUB $8,$4,$5
        #10;
        Instr = 32'b000000_00001_00010_01001_00000_100100; // AND $9,$1,$2
        #10;
        Instr = 32'b000000_00100_00101_01010_00000_100100; // AND $10,$4,$5
        #10;
        Instr = 32'b000000_00001_00010_01011_00000_100101; // OR $11,$1,$2
        #10;
        Instr = 32'b000000_00100_00101_01100_00000_100101; // OR $12,$4,$5
        #10;
        Instr = 32'b000000_00001_00010_01101_00000_101010; // SLT $13,$1,$2
        #10;
        Instr = 32'b000000_00100_00101_01110_00000_101010; // SLT $14,$4,$5
        #10;
		
1. ADD $3, $1, $2
$3 = $1 + $2 = 5 + 6 = 11

Resultado:

Decimal: 11

Binario: 00000000000000000000000000001011

2. ADD $6, $4, $5
$6 = $4 + $5 = 8 + 4 = 12

Resultado:

Decimal: 12

Binario: 00000000000000000000000000001100

3. SUB $7, $1, $2
$7 = $1 - $2 = 5 - 6 = -1

Resultado:

Decimal: -1

Binario (Complemento a dos de -1): 11111111111111111111111111111111

4. SUB $8, $4, $5
$8 = $4 - $5 = 8 - 4 = 4

Resultado:

Decimal: 4

Binario: 00000000000000000000000000000100

5. AND $9, $1, $2
$9 = $1 & $2 En binario:
0000...0101 (5)
0000...0110 (6)
Operación bit a bit AND:

yaml
Copiar
Editar
  0101
& 0110
= 0100
Resultado:

Decimal: 4

Binario: 00000000000000000000000000000100

6. AND $10, $4, $5
$10 = $4 & $5 En binario:
0000...1000 (8)
0000...0100 (4)
Operación bit a bit AND:

yaml
Copiar
Editar
  1000
& 0100
= 0000
Resultado:

Decimal: 0

Binario: 00000000000000000000000000000000

✅ Aquí el ZF = 1, porque el resultado es 0.

7. OR $11, $1, $2
$11 = $1 | $2 En binario:
0000...0101 (5)
0000...0110 (6)
Operación bit a bit OR:

yaml
Copiar
Editar
  0101
| 0110
= 0111
Resultado:

Decimal: 7

Binario: 00000000000000000000000000000111

8. OR $12, $4, $5
$12 = $4 | $5 En binario:
0000...1000 (8)
0000...0100 (4)
Operación bit a bit OR:

yaml
Copiar
Editar
  1000
| 0100
= 1100
Resultado:

Decimal: 12

Binario: 00000000000000000000000000001100

9. SLT $13, $1, $2
$13 = ($1 < $2) ? 1 : 0 5 < 6 → verdadero

Resultado:

Decimal: 1

Binario: 00000000000000000000000000000001

10. SLT $14, $4, $5
$14 = ($4 < $5) ? 1 : 0 8 < 4 → falso

Resultado:

Decimal: 0

Binario: 00000000000000000000000000000000

✅ Aquí también el ZF = 1, porque el resultado es 0.